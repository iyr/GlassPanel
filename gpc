#!/bin/bash

#Vanilla Console Resolution is 80 Columns by 22 Rows (mostly).

#Detect Initial Setup
USER=$(whoami)

#Remove temporary motd, if one already exists.
if [ -f "/tmp/.tmpmotd_$USER" ]
	then
	rm /tmp/.tmpmotd_$USER
fi


SETTINGS="/home/$USER/.gpc_settings_$USER"
if [ -f "$SETTINGS" ]
	then
		echo "Configuration file detected for $USER!"
		echo "Reading settings..."
		
	else
		echo "No configuration file found!"
		echo "Detecting system..."
		echo "Generating settings file..."
		#Generate Tweakable Settings file
		echo "USER=$USER" >> /home/$USER/.gpc_settings_$USER
		echo "#Adjust settings for color coding; below moderate is green, below critical is yellow and above is red" >> /home/$USER/.gpc_settings_$USER
		echo "#Memory Settings:" >> /home/$USER/.gpc_settings_$USER
		echo "MODERATE_MEM=60" >> /home/$USER/.gpc_settings_$USER
		echo "CRITICAL_MEM=80" >> /home/$USER/.gpc_settings_$USER
		echo "#CPU Settings:" >> /home/$USER/.gpc_settings_$USER
		echo "MODERATE_CPU=60" >> /home/$USER/.gpc_settings_$USER
		echo "CRITICAL_CPU=80" >> /home/$USER/.gpc_settings_$USER
		echo " " >> /home/$USER/.gpc_settings_$USER
		echo "#Allows you to append the status of selected services to the motd (none enabled by default)" >> /home/$USER/.gpc_settings_$USER
		echo "#Usage: SERVICE \"ServiceName\" \"ServiceAlias\" (no spaces in alias)" >> /home/$USER/.gpc_settings_$USER
		echo "#Example: SERVICE NetworkManager Networking" >> /home/$USER/.gpc_settings_$USER
		echo " " >> /home/$USER/.gpc_settings_$USER
		echo "#Environment Settings, do not edit." >> /home/$USER/.gpc_settings_$USER
fi


#Print the status of a service:
NM_STATUS=$(service NetworkManager status | awk 'NR == 3 {print $2}')
if [ $NM_STATUS = "active" ]
	then
	echo -e "[ \e[0;32mNetworking\e[0m ]" >> /tmp/.tmpmotd_$USER
	else
	echo -e "[ \e[0;31mNetworking\e[0m ]" >> /tmp/.tmpmotd_$USER
fi

#Detect Internet availability:
GOOGLE_STATUS=$(ping -c4 google.com | awk 'NR == 8 {print $6}' | cut -c1)
if [ $GOOGLE_STATUS -eq 0 ]
	then
	INT_STATUS="true"
	echo -e "[ \e[0;32mINT\e[0m ]" >> /tmp/.tmpmotd_$USER
	elif [ $GOOGLE_STATUS -gt 0  ]
		then
		INT_STATUS="false"
		echo -e "[ \e[1;33mINT\e[0m ]" >> /tmp/.tmpmotd_$USER
	else
	INT_STATUS="false"
	echo -e "[ \e[0;31mINT\e[0m ]" >> /tmp/.tmpmotd_$USER
fi

#Calculates the system memory usage as a rounded integer percentage and prints to a log
AVE_MEM=$(free | awk 'NR == 3 {print $3} NR == 2 {print $2}' | paste -sd" " | awk 'NR ==1 {print $2/$1*100}' | awk '{printf("%d\n",$1 + 0.5)}')
if [ $AVE_MEM -lt 60 ]
	then
	echo -e "[ \e[0;32mRAM\e[0m ][ \e[0;32m%$AVE_MEM\e[0m memory in use. ]" >> /tmp/.tmpmotd_$USER
	
	elif [ $AVE_MEM -ge 60 -a $AVE_MEM -lt 80 ]
	then
	echo -e "[ \e[1;33mRAM\e[0m ][ \e[1;33m%$AVE_MEM\e[0m memory in use. ]" >> /tmp/.tmpmotd_$USER
	
	else
	echo -e "[ \e[0;31mRAM\e[0m ][ \e[0;31m%$AVE_MEM\e[0m memory in use. ]" >> /tmp/.tmpmotd_$USER
fi

CUR_CPU=$(top -bn1 | grep "Cpu(s)" | sed "s/.*, *\([0-9.]*\)%* id.*/\1/" | awk '{print $1}' | awk '{printf("%d\n",$1 + 0.5)}')
if [ $CUR_CPU -lt 60 ]
        then
        echo -e "[ \e[0;32mCPU\e[0m ][ \e[0;32m%$CUR_CPU\e[0m CPU in use. ]" >> /tmp/.tmpmotd_$USER

        elif [ $CUR_CPU -ge 60 -a $CUR_CPU -lt 80 ]
        then
	echo -e "[ \e[1;33mCPU\e[0m ][ \e[1;33m%$CUR_CPU\e[0m CPU in use. ]" >> /tmp/.tmpmotd_$USER

        else
        echo -e "[ \e[0;31mCPU\e[0m ][ \e[0;31m%$CUR_CPU\e[0m CPU in use. ]" >> /tmp/.tmpmotd_$USER
fi


#Determine how many (if any) updates are available (yum only).
if [ $INT_STATUS = "false" ]
	then
	echo -e "[ \e[0;31mYUM\e[0m ][ No connection to internet. ]" >> /tmp/.tmpmotd_$USER
	else
		NUM_UPDATES=$(yum check-update | grep -c "updates")
		if [ $NUM_UPDATES -ne 0 ]
			then
			echo -e "[ \e[1;33mYUM\e[0m ][ $NUM_UPDATES updates available. ]" >> /tmp/.tmpmotd_$USER
			else
			echo -e "[ \e[0;32mYUM\e[0m ][ $NUM_UPDATES updates available, System is up to date. ]" >> /tmp/.tmpmotd_$USER
		fi
fi

cat /tmp/.tmpmotd_$USER
